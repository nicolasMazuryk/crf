/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet: width height image $spritesheet-sprites;
*/
$ico-aid-name: 'ico-aid';
$ico-aid-x: 0px;
$ico-aid-y: 0px;
$ico-aid-offset-x: 0px;
$ico-aid-offset-y: 0px;
$ico-aid-width: 32px;
$ico-aid-height: 32px;
$ico-aid-total-width: 74px;
$ico-aid-total-height: 74px;
$ico-aid-image: '../images/sprite.png';
$ico-aid: (0px, 0px, 0px, 0px, 32px, 32px, 74px, 74px, '../images/sprite.png', 'ico-aid', );
$ico-doctor-name: 'ico-doctor';
$ico-doctor-x: 42px;
$ico-doctor-y: 0px;
$ico-doctor-offset-x: -42px;
$ico-doctor-offset-y: 0px;
$ico-doctor-width: 32px;
$ico-doctor-height: 32px;
$ico-doctor-total-width: 74px;
$ico-doctor-total-height: 74px;
$ico-doctor-image: '../images/sprite.png';
$ico-doctor: (42px, 0px, -42px, 0px, 32px, 32px, 74px, 74px, '../images/sprite.png', 'ico-doctor', );
$ico-nurse-name: 'ico-nurse';
$ico-nurse-x: 0px;
$ico-nurse-y: 42px;
$ico-nurse-offset-x: 0px;
$ico-nurse-offset-y: -42px;
$ico-nurse-width: 32px;
$ico-nurse-height: 32px;
$ico-nurse-total-width: 74px;
$ico-nurse-total-height: 74px;
$ico-nurse-image: '../images/sprite.png';
$ico-nurse: (0px, 42px, 0px, -42px, 32px, 32px, 74px, 74px, '../images/sprite.png', 'ico-nurse', );
$ico-search-name: 'ico-search';
$ico-search-x: 42px;
$ico-search-y: 42px;
$ico-search-offset-x: -42px;
$ico-search-offset-y: -42px;
$ico-search-width: 24px;
$ico-search-height: 24px;
$ico-search-total-width: 74px;
$ico-search-total-height: 74px;
$ico-search-image: '../images/sprite.png';
$ico-search: (42px, 42px, -42px, -42px, 24px, 24px, 74px, 74px, '../images/sprite.png', 'ico-search', );
$spritesheet-width: 74px;
$spritesheet-height: 74px;
$spritesheet-image: '../images/sprite.png';
$spritesheet-sprites: ($ico-aid, $ico-doctor, $ico-nurse, $ico-search, );
$spritesheet: (74px, 74px, '../images/sprite.png', $spritesheet-sprites, );

/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
